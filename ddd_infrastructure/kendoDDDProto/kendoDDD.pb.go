// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kendoDDD.proto

package kendoDDDProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// DispatchCommandRequest is passed when dispatching
type CommandRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_kendoDDD_8d7d1c1d998d94ac, []int{0}
}
func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandRequest.Unmarshal(m, b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
}
func (dst *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(dst, src)
}
func (m *CommandRequest) XXX_Size() int {
	return xxx_messageInfo_CommandRequest.Size(m)
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

func (m *CommandRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CommandRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CommandMapRequest struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DicInfo              map[string]string `protobuf:"bytes,2,rep,name=dicInfo,proto3" json:"dicInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CommandMapRequest) Reset()         { *m = CommandMapRequest{} }
func (m *CommandMapRequest) String() string { return proto.CompactTextString(m) }
func (*CommandMapRequest) ProtoMessage()    {}
func (*CommandMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_kendoDDD_8d7d1c1d998d94ac, []int{1}
}
func (m *CommandMapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandMapRequest.Unmarshal(m, b)
}
func (m *CommandMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandMapRequest.Marshal(b, m, deterministic)
}
func (dst *CommandMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandMapRequest.Merge(dst, src)
}
func (m *CommandMapRequest) XXX_Size() int {
	return xxx_messageInfo_CommandMapRequest.Size(m)
}
func (m *CommandMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandMapRequest proto.InternalMessageInfo

func (m *CommandMapRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CommandMapRequest) GetDicInfo() map[string]string {
	if m != nil {
		return m.DicInfo
	}
	return nil
}

// DispatchCommandResponse is empty.
type CommandResponse struct {
	IsSucceed            bool     `protobuf:"varint,1,opt,name=isSucceed,proto3" json:"isSucceed,omitempty"`
	ErrMsg               string   `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Infos                string   `protobuf:"bytes,3,opt,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandResponse) Reset()         { *m = CommandResponse{} }
func (m *CommandResponse) String() string { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()    {}
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_kendoDDD_8d7d1c1d998d94ac, []int{2}
}
func (m *CommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandResponse.Unmarshal(m, b)
}
func (m *CommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandResponse.Marshal(b, m, deterministic)
}
func (dst *CommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResponse.Merge(dst, src)
}
func (m *CommandResponse) XXX_Size() int {
	return xxx_messageInfo_CommandResponse.Size(m)
}
func (m *CommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResponse proto.InternalMessageInfo

func (m *CommandResponse) GetIsSucceed() bool {
	if m != nil {
		return m.IsSucceed
	}
	return false
}

func (m *CommandResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CommandResponse) GetInfos() string {
	if m != nil {
		return m.Infos
	}
	return ""
}

func init() {
	proto.RegisterType((*CommandRequest)(nil), "kendoDDDProto.CommandRequest")
	proto.RegisterType((*CommandMapRequest)(nil), "kendoDDDProto.CommandMapRequest")
	proto.RegisterMapType((map[string]string)(nil), "kendoDDDProto.CommandMapRequest.DicInfoEntry")
	proto.RegisterType((*CommandResponse)(nil), "kendoDDDProto.CommandResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KendoGrpcClient is the client API for KendoGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KendoGrpcClient interface {
	DispatchCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	DispatchCommandMap(ctx context.Context, in *CommandMapRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type kendoGrpcClient struct {
	cc *grpc.ClientConn
}

func NewKendoGrpcClient(cc *grpc.ClientConn) KendoGrpcClient {
	return &kendoGrpcClient{cc}
}

func (c *kendoGrpcClient) DispatchCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/kendoDDDProto.KendoGrpc/DispatchCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kendoGrpcClient) DispatchCommandMap(ctx context.Context, in *CommandMapRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/kendoDDDProto.KendoGrpc/DispatchCommandMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KendoGrpcServer is the server API for KendoGrpc service.
type KendoGrpcServer interface {
	DispatchCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	DispatchCommandMap(context.Context, *CommandMapRequest) (*CommandResponse, error)
}

func RegisterKendoGrpcServer(s *grpc.Server, srv KendoGrpcServer) {
	s.RegisterService(&_KendoGrpc_serviceDesc, srv)
}

func _KendoGrpc_DispatchCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KendoGrpcServer).DispatchCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kendoDDDProto.KendoGrpc/DispatchCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KendoGrpcServer).DispatchCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KendoGrpc_DispatchCommandMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KendoGrpcServer).DispatchCommandMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kendoDDDProto.KendoGrpc/DispatchCommandMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KendoGrpcServer).DispatchCommandMap(ctx, req.(*CommandMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KendoGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kendoDDDProto.KendoGrpc",
	HandlerType: (*KendoGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DispatchCommand",
			Handler:    _KendoGrpc_DispatchCommand_Handler,
		},
		{
			MethodName: "DispatchCommandMap",
			Handler:    _KendoGrpc_DispatchCommandMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kendoDDD.proto",
}

func init() { proto.RegisterFile("kendoDDD.proto", fileDescriptor_kendoDDD_8d7d1c1d998d94ac) }

var fileDescriptor_kendoDDD_8d7d1c1d998d94ac = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0xb3, 0xa0, 0x60, 0x47, 0xfe, 0xe8, 0xc4, 0x98, 0x86, 0xa0, 0x69, 0x38, 0x71, 0xb1,
	0x07, 0xbc, 0x18, 0x0e, 0x1e, 0xb0, 0x86, 0x18, 0x43, 0x42, 0x6a, 0xf4, 0xe6, 0x61, 0xdd, 0x2e,
	0xd8, 0x00, 0xbb, 0xeb, 0x6e, 0x31, 0xe1, 0x3b, 0x79, 0xf5, 0xfb, 0x99, 0x6e, 0x17, 0xff, 0x2b,
	0xb7, 0x79, 0x33, 0xd3, 0xdf, 0x9b, 0xd7, 0x2c, 0x34, 0x66, 0x5c, 0x24, 0x32, 0x8a, 0xa2, 0x50,
	0x69, 0x99, 0x49, 0xac, 0xaf, 0xf5, 0x38, 0x97, 0x9d, 0x73, 0x68, 0x5c, 0xc8, 0xc5, 0x82, 0x8a,
	0x24, 0xe6, 0x4f, 0x4b, 0x6e, 0x32, 0x44, 0xd8, 0x12, 0x74, 0xc1, 0x7d, 0x12, 0x90, 0xae, 0x17,
	0xdb, 0x1a, 0x7d, 0xa8, 0x2a, 0xba, 0x9a, 0x4b, 0x9a, 0xf8, 0xa5, 0x80, 0x74, 0x6b, 0xf1, 0x5a,
	0x76, 0x5e, 0x08, 0xec, 0x3b, 0xc0, 0x88, 0xaa, 0xff, 0x18, 0x43, 0xa8, 0x26, 0x29, 0xbb, 0x12,
	0x13, 0xe9, 0x97, 0x82, 0x72, 0x77, 0xb7, 0x77, 0x12, 0x7e, 0x39, 0x25, 0xfc, 0x81, 0x09, 0xa3,
	0x62, 0xff, 0x52, 0x64, 0x7a, 0x15, 0xaf, 0xbf, 0x6e, 0xf5, 0xa1, 0xf6, 0x79, 0x80, 0x7b, 0x50,
	0x9e, 0xf1, 0x95, 0xf3, 0xca, 0x4b, 0x3c, 0x80, 0xed, 0x67, 0x3a, 0x5f, 0x72, 0x7b, 0xac, 0x17,
	0x17, 0xa2, 0x5f, 0x3a, 0x23, 0x9d, 0x7b, 0x68, 0xbe, 0xc7, 0x35, 0x4a, 0x0a, 0xc3, 0xb1, 0x0d,
	0x5e, 0x6a, 0x6e, 0x96, 0x8c, 0x71, 0x9e, 0x58, 0xc8, 0x4e, 0xfc, 0xd1, 0xc0, 0x43, 0xa8, 0x70,
	0xad, 0x47, 0x66, 0xea, 0x58, 0x4e, 0xe5, 0x16, 0xa9, 0x98, 0x48, 0xe3, 0x97, 0x0b, 0x0b, 0x2b,
	0x7a, 0xaf, 0x04, 0xbc, 0xeb, 0x3c, 0xd4, 0x50, 0x2b, 0x86, 0x63, 0x68, 0x46, 0xa9, 0x51, 0x34,
	0x63, 0x8f, 0xce, 0x14, 0x8f, 0x7e, 0xcf, 0xec, 0x02, 0xb7, 0x8e, 0xff, 0x1a, 0xbb, 0x5b, 0xef,
	0x00, 0xbf, 0x11, 0x47, 0x54, 0x61, 0xb0, 0xe9, 0x47, 0x6e, 0xe2, 0x0e, 0xda, 0x50, 0x4f, 0x65,
	0x38, 0xd5, 0x8a, 0x15, 0xaf, 0x64, 0xe0, 0xdd, 0x1a, 0xae, 0xed, 0xee, 0x98, 0x3c, 0x54, 0x6c,
	0xef, 0xf4, 0x2d, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x34, 0x43, 0x1c, 0x4b, 0x02, 0x00, 0x00,
}
